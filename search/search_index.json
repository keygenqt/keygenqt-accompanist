{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"keygenqt Accompanist is a group of libraries that aim to supplement Jetpack Compose with features that are commonly required by developers but not yet available. Connection repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.accompanist:keygenqt-accompanist:{version}\") } Features SwipeRefreshList ClickableTextColorAnimation License Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#connection","text":"repositories { maven(\"https://artifactory.keygenqt.com/artifactory/open-source\") } dependencies { implementation(\"com.keygenqt.accompanist:keygenqt-accompanist:{version}\") }","title":"Connection"},{"location":"#features","text":"SwipeRefreshList ClickableTextColorAnimation","title":"Features"},{"location":"#license","text":"Copyright 2022 Vitaliy Zarubin Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"ClickableTextColorAnimation/","text":"Clickable text with color animation on click /** * Clickable text color animation * * @param modifier Modifier to apply to this layout node. * @param colorDefault Color for default state. * @param colorAction Color for animate. * @param text Text value. * @param delay Delay animation time. * @param style Text style. * @param underline Text style underline. * @param softWrap Whether the text should break at soft line breaks. * @param maxLines An optional maximum number of lines for the text to span, wrapping if necessary. * @param overflow How visual overflow should be handled. * @param onTextLayout How visual overflow should be handled. * @param onClick Callback that is executed when users click the text. This callback is called * with clicked character's offset. */ @Composable fun ClickableTextColorAnimation( modifier: Modifier = Modifier, colorDefault: Color, colorAction: Color, colorDisable: Color? = null, text: String, enabled: Boolean = true, delay: Long = 500, style: TextStyle = TextStyle.Default, underline: Boolean = true, softWrap: Boolean = true, maxLines: Int = Int.MAX_VALUE, overflow: TextOverflow = TextOverflow.Clip, onTextLayout: (TextLayoutResult) -> Unit = {}, onClick: () -> Unit, )","title":"ClickableTextColorAnimation"},{"location":"SwipeRefreshList/","text":"LazyColumn with embedded SwipeRefresh. and set of states for content: Error, Empty, Loading /** * LazyColumn with embedded SwipeRefresh and set of states for content: Error, Empty, Loading * * @param modifier Modifier to apply to this layout node. * @param items List items. * @param indicator the indicator that represents the current state. By default this will use a [SwipeRefreshIndicator]. * @param contentPadding a padding around the whole content. * @param contentLoadState loadState LoadState.Loading / LoadState.Error. * @param contentLoading Content screen LoadState.Loading. * @param contentEmpty Content screen empty data. * @param content Content item model. */ @Composable fun <T : Any> SwipeRefreshList( modifier: Modifier = Modifier, items: LazyPagingItems<T>, listState: LazyListState, refreshState: SwipeRefreshState, indicator: @Composable (state: SwipeRefreshState, refreshTrigger: Dp), contentPadding: PaddingValues, contentLoadState: @Composable ((LoadState) -> Unit)?, contentLoading: @Composable (() -> Unit)?, contentEmpty: @Composable (() -> Unit)?, contentError: @Composable (() -> Unit)?, content: @Composable (Int, T) -> Unit, )","title":"SwipeRefreshList"}]}